{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/search-box/search-box.component.jsx","App.js","index.js"],"names":["Card","props","className","alt","src","userId","userName","userEmail","CardList","artists","map","user","name","id","email","SearchBox","placeholder","handleChange","onChange","App","state","searchField","fetch","then","response","json","data","setState","this","filteredArray","filter","artist","toLowerCase","includes","event","target","value","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,kBAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UAEI,qBAAKC,IAAI,MAAMC,IAAG,+BAA0BH,EAAMI,OAAhC,eAClB,6BAAMJ,EAAMK,WACZ,4BAAIL,EAAMM,iBCGHC,MAPf,SAAkBP,GACd,OACI,sBAAKC,UAAU,YAAf,cAA6BD,EAAMQ,QAAQC,KAAI,SAAAC,GAAI,OAC/C,cAAC,EAAD,CAAmBL,SAAWK,EAAKC,KAAMP,OAAUM,EAAKE,GAAIN,UAAWI,EAAKG,OAAjEH,EAAKE,OADpB,QCHKE,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAEhB,uBAAOf,UAAU,kBAAkBc,YAAaA,EAAaE,SAAUD,MCiDjEE,E,kDA3Cb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXX,QAAS,GACTY,YAAa,IAJJ,E,gEASO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAElB,QAASiB,S,+BAIhC,IAAD,SAC2BE,KAAKR,MAA7BX,EADH,EACGA,QAASY,EADZ,EACYA,YACVQ,EAAgBpB,EAAQqB,QAAO,SAAAC,GAAM,OACzCA,EAAOnB,KAAKoB,cAAcC,SAASZ,MAGvC,OACE,sBAAKnB,UAAU,MAAf,UACE,kDAEE,cAAC,EAAD,CAAWc,YAAc,kBAAkBC,aAAgB,SAACiB,GAC1D,EAAKP,SAAS,CAACN,YAAaa,EAAMC,OAAOC,WAI7C,cAAC,EAAD,CAAU3B,QAASoB,W,GAjCTQ,aCHlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7057dbb4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        \r\n        <img alt=\"cat\" src={`https://robohash.org/${props.userId}?set=set2`}></img>\r\n        <h2 >{props.userName}</h2>\r\n        <p>{props.userEmail}</p>\r\n\r\n    </div>\r\n);","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\nfunction CardList(props){\r\n    return (\r\n        <div className=\"card-list\"> {props.artists.map(user => \r\n            <Card key={user.id}userName ={user.name} userId = {user.id} userEmail={user.email}/>)} </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    \r\n         <input className=\"search-monsters\" placeholder={placeholder} onChange={handleChange} />\r\n          \r\n    \r\n)","// import logo from './logo.svg';\nimport './App.css';\n\n\nimport React, {Component} from 'react';\n\nimport CardList from './component/card-list/card-list.component';\nimport {SearchBox} from './component/search-box/search-box.component';\n\nclass App extends Component{\n\n  constructor(){\n    super();\n    this.state = {\n      artists: [],\n      searchField: ''\n    }\n    \n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(data => this.setState({ artists: data}));\n    \n  }\n\n  render(){\n      const {artists, searchField} = this.state;\n      const filteredArray = artists.filter(artist => \n        artist.name.toLowerCase().includes(searchField)\n      );\n  \n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n         \n          <SearchBox placeholder = \"search monsters\" handleChange = {(event) =>{\n            this.setState({searchField: event.target.value})\n          }}/>\n        \n       \n        <CardList artists={filteredArray} />\n       \n       \n        \n        \n         \n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}